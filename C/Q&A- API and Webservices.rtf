{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang16393\deflangfe16393{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial Black;}{\f1\fswiss\fprq2\fcharset0 Calibri;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red34\green34\blue34;\red255\green255\blue255;\red51\green51\blue51;\red255\green255\blue0;\red0\green0\blue255;\red5\green99\blue193;\red0\green17\blue136;\red0\green0\blue0;\red51\green102\blue51;\red100\green40\blue128;\red42\green0\blue255;\red33\green37\blue41;}
{\*\generator Riched20 10.0.18362}{\*\mmathPr\mdispDef1\mwrapIndent1440 }\viewkind4\uc1 
\pard\nowidctlpar\sa200\sl276\slmult1\b\f0\fs36 Notes By: Kapil Sir\par
\ulth\par

\pard 
{\pntext\f1 1.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pndec{\pntxta.}}
\nowidctlpar\fi-360\li644\sa200\sl276\slmult1\ulnone\b0\f1\fs22\lang9 what are the different methods present in api? \par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 There are four different methods present in api:\par
GET\par
POST\par
PUT\par
DELETE\par
PATCH\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 2.\tab What are diff operations performed in Api?\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1  Below are the operations performed in Api\par
  GET- used to fetch the data\par
  POST- Used to create data\par

\pard\nowidctlpar\sa200\sl276\slmult1      PUT- Used to update data\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1   DELETE- used to delete data\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 3.\tab What is difference between PUT and PATCH?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 PUT- we can update all the fields as well as single field\par
PATCH- we can update single/ partial fields\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 4.\tab What are main differences between API and Web Service?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 -Api call internally and webservices call over the internet\par

\pard\nowidctlpar\sa200\sl276\slmult1\cf1\highlight2\f2\fs20\lang16393       - The only\~\b difference\b0\~is that a\~\b Web service\b0\~facilitates interaction\~\b between\b0\~two machines over a         network. An\~\b API\b0\~acts as an interface\~\b between\b0\~two\~\b different\b0\~applications so that they can communicate      with each other..\b  Web service\b0\~also uses SOAP, REST, and XML-RPC as a means of communication.\par
\cf0\highlight0\f1\lang9\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1\fs22 5.\tab What are the advantages of API Testing?\par

\pard 
{\pntext\f1 a)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pnlcltr{\pntxta)}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 Api provides the security\par
{\pntext\f1 b)\tab}API checks the authentication and the data that we are passing\par
{\pntext\f1 c)\tab}API can transfer the load to diff microservices\par
{\pntext\f1 d)\tab}API helps to avoid data breaching\par
{\pntext\f1 e)\tab}\cf3\highlight2\f2\fs23\lang16393 Test for Core Functionality\par
{\pntext\f1 f)\tab}Time Effective- we can hit lots of apis within less time\par
{\pntext\f1 g)\tab}Language-Independent- like json,XML, html, text\par
{\pntext\f1 h)\tab}Easy Integration with GUI\par

\pard\nowidctlpar\sa200\sl276\slmult1\cf0\highlight0\f1\fs22\lang9\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 6.\tab What are different Test Environment in \highlight4 project\highlight0 ?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 - Generally we will have below four test Enviornments:\par
DEV- where developers works\par
SIT/QA- where Testers works\par
UAT- where Testers and Client works\par
PROD- it\rquote s a live env.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 7.\tab What are the test environment of \highlight4 API\highlight0 ?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Global- Global has large scope (used to pass variables between diff collections)\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1    Local \endash  Local has small scope (Used to pass variable from one request to another)\par
\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 -we are using QA/UAT enviornment in which we are using Global and Local enviornmrnt for api methods\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 8.\tab What must be checked when performing API testing? \par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Error codes, data which are coming (Retrieval data), Time\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 9.\tab What are tools could be used for API testing?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Postman\par
Swagger\par
SoapUI\par
Etc.\line\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 10.\tab What are differences between API Testing and UI Testing? \par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Api dosent provide the GUI( Graphical User interface) but UI provides.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 11.\tab What are common API errors that often founded?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 This are the common error getting during api testing\par
201-created\par
200-ok\par
400-Bad request\par
401-Unauthorised\par
403- forbidden\par
404- page not found\par
500- Internal server error\par
503-service not available\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 12.\tab Any examples why error code generates?\par

\pard\nowidctlpar\sa200\sl276\slmult1     200- when we get succesfull data\par
    201- when we create data into database\par
    400- URI wrong or end point missing\par
    401- when session got expired, passing invalid token/ username/pass\par
    404- when we are trying to access the URL but URL not present\par
    405- Method not allowed\par
    500- any server down or network issue\par
\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 13.\tab what are the collections?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Collections are used to store the services(api methods)\par

\pard\nowidctlpar\sa200\sl276\slmult1       By using collection we can run all the methods at the same time.\par
      We can Import/Export Collection.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 14.\tab what is mean bearer token?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Bearer token is one of the Authentication pass in headers\par
Bearer means identification for the token.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 15.\tab where we pass the data in post?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 We pass the data in Body-> Raw-> in the form of json, XML. Html, text \par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 16.\tab can we run collection?\par

\pard\nowidctlpar\sa200\sl276\slmult1    Yes, we can run the collection and collection methods at the same time, but before we run the            previous or old collection we have to update the authentication.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 17.\tab what is mean end points/service url?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 End points are the different service urls which are used to hit the URL with domain uri.\par
 \par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 18.\tab what is mean API ?-Application programming interface\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1 Api stands for Application programming interface.\par
- used to communicate between two system\par
-it simply knows as sending the request and getting the response.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 19.\tab what are headers?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Headers is nothing but the what kind of request it is\par

\pard\nowidctlpar\sa200\sl276\slmult1                             \{content-type= application json/\par
                             application xml/\par
                             application text \}\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 20.\tab what is bearer?\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1  Bearer is the indentifier for perticular token used for the Authentication.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 21.\tab Difference between SOAP and REST\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1           SOAP                                                       REST\par
1. soap is protocol                             1.rest is architecture\par
2. uses XML format only                         2. uses XML,JSON,HTML,TEXT,JAVASCRIPT\par
3. soap need WSDL file                          3. rest need API only\par
4. type of security provided by soap:      4. type of security provided by rest\par
    SOAP ENVIORNMENT                         AUTH TOKEN, HEADER, PARAMS\par
5. Heavy in weight API's                          5. Light in weight API's\par
6 .Response time is more                         6. Response time is less\par
7. Not best for CRUD operation                    7. Best for CRUD operation                        \par

\pard\nowidctlpar\sa200\sl276\slmult1\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 22.\tab  Types of API\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1 REST API- uses Postman tool (Representational state transfer)\par
SOAP API- Uses SOAPUI tool (simple object access protocol)\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 23.\tab Concept under REST:\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 REST- REST is an architecture used to create rest api.\par
REST Assured- To automate rest api we need rest assured libraries.\par
RESTFUL-  when we automate rest api it called as restful services.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 24.\tab What is the difference between / and ?.\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 /- Path parameter\par
?- Query parameter\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 25.\tab  What is producer and consumer?\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1  Producer- who produce the data\par
Consumer- who consumes the data\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 26.\tab What is URI?\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1 URI- Unique resourse identifier\par
URI= URL+ENDPOINT\par
Eg. {{\field{\*\fldinst{HYPERLINK https://www.amazon.com+/login/home }}{\fldrslt{https://www.amazon.com+/login/home\ul0\cf0}}}}\f1\fs22\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 27.\tab  What are diff ways to pass the data/ scripting languages?\par

\pard 
{\pntext\f1 a)\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pnlcltr{\pntxta)}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 JSON:\par

\pard\nowidctlpar\li1080\sa200\sl276\slmult1\{\par
 "name": "Suraj ",\par
 "email": "Suraj123@gmail.com",\par
 "gender": "Male",\par
 "status": "Active"\par
\}\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 b)\tab XML:\par

\pard\nowidctlpar\li1080\sa200\sl276\slmult1 <name>suraj</name>\par
<email>{{\field{\*\fldinst{HYPERLINK "mailto:suraj@gmail.com</email" }}{\fldrslt{\ul\cf5\cf6\ul suraj@gmail.com</email}}}}\f1\fs22 >\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 c)\tab String\par
d)\tab Text\par
e)\tab Html\par
f)\tab Javascript\par

\pard\nowidctlpar\li1080\sa200\sl276\slmult1 Etc.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 28.\tab What are headers?\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1  Headers means what kind of data we are passing.\par

\pard 
{\pntext\f1 a.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\nowidctlpar\fi-360\li720\sa200\sl276\slmult1 Authorization \par
{\pntext\f1 b.\tab}Content Type\par
{\pntext\f1 c.\tab}Language  \par
{\pntext\f1 d.\tab}Etc.\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 29.\tab What we pass in http request?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 a. URI\par
b. Headers\par
c. Payload\par
\par

\pard\nowidctlpar\sa200\sl276\slmult1 30.  What are different authorization?\par
   a. Basic Auth\par
    pass the username and pass.\par
  b. Digest\par
    whenever we are passing username and pass it will get convert in # keys.\par
    It means your username/pass will secured get server side too.\par
 \par
  c. Oauth1\par
    Oauth1 required below things:\par

\pard 
{\pntext\f1 1.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pndec{\pntxta.}}
\nowidctlpar\fi-360\li816\sa200\sl276\slmult1 Consumer Key\par
{\pntext\f1 2.\tab}Consumer Secret\par
{\pntext\f1 3.\tab}Access Token\par
{\pntext\f1 4.\tab}Secret Token\par

\pard\nowidctlpar\sa200\sl276\slmult1    Above info will get from developers.\par
\par

\pard\nowidctlpar\fi-360\li720\sa200\sl276\slmult1 e.\tab Oauth2\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Oauth2 required below things:\par

\pard 
{\pntext\f1 1.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pndec{\pntxta.}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 Client Id\par
{\pntext\f1 2.\tab}Client  Secret\par
{\pntext\f1 3.\tab}Grant type\par

\pard\nowidctlpar\li1080\sa200\sl276\slmult1 Above info will get from developers.\par
 \par

\pard\nowidctlpar\fi-360\li720\sa200\sl276\slmult1 f.\tab Bearer Token\par
g.\tab NoAuth\par

\pard\nowidctlpar\sa200\sl276\slmult1\par

\pard 
{\pntext\f1 31.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart31\pndec{\pntxta.}}
\nowidctlpar\fi-360\li644\sa200\sl276\slmult1  What are Oauth1 and Oauth2?\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1  Oauth1- this auth uses when we need third party logins.\par
 Oauth2- this auth uses when we have single url and different enpoints\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 32.\tab How to pass the Pre-requisite in postman?\par

\pard\nowidctlpar\li644\sa200\sl276\slmult1 We can pass Pre-requisite as pre- request data in many ways.\par
Like we can pass pre-request as authorization, content type, name, user details etc.\par
Eg. Passing Content-type as pre-request script\par

\pard\widctlpar\sl270\slmult0\cf7\f3\fs18\lang16393         pm\cf8 .\cf7 request\cf8 .\cf9 headers\cf8 .\cf10\b add\cf8\b0 (\{\par
\~\~\~\~    key:\cf11 'Content-Type'\cf8 ,\par
\~\~\~   \~value:\~\cf11 'application/json'\cf8\par
      \});\par

\pard\nowidctlpar\li644\sa200\sl276\slmult1\cf0\f1\fs22\lang9\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 33.\tab  What are different assertion/ validations in Postman.\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Assertions are apply in Tests tab.\par

\pard 
{\pntext\f1 a.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 Validate  response body contains String\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1     tests["Body matches string"] = responseBody.has("string_you_want_to_search");\par
\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 b.\tab Validate response time\par

\pard\nowidctlpar\li1080\sa200\sl276\slmult1 tests["Response time is less than 200ms"] = responseTime < 200;\par
\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 c.\tab Validate response body has data\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1  var jsonData = JSON.parse(responseBody);\par
tests["Your test name"] = jsonData.value === 100;\par
\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 d.\tab Validate status code\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1   tests["Status code is 200"] = responseCode.code === 200;\par

\pard\nowidctlpar\sa200\sl276\slmult1\par
  etc.\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 34.\tab what are different environment variable in Postman?\par

\pard 
{\pntext\f1 a.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 Global variable\par
{\pntext\f1 b.\tab}Collection variables\par
{\pntext\f1 c.\tab}Environmental variables\par
{\pntext\f1 d.\tab}Local variables\par

\pard\nowidctlpar\sa200\sl276\slmult1\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 35.\tab What is the scope for postman variables?\par

\pard 
{\pntext\f1 a.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 Global variable\par

\pard\nowidctlpar\li1080\sa200\sl276\slmult1 -Allow you to access data between collections.\par
-Global variable are available throughout workspace.\par
-Since global variables can create confusion, you should only use them sparingly\emdash for example to quickly test something or when your project is at a very early prototyping stage.\par
Snippet:  pm.globals.set("variable_key", "variable_value");\par
\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 b.\tab Collection Variables\par

\pard\nowidctlpar\li1080\sa200\sl276\slmult1 -Collection variables are available throughout the requests in a collection and are independent of environments, so do not change based on the selected environment.\par
-\lang16393  \lang9\tab Collection variables are suitable if you are only using a single environment, for example for auth / URL details.\par
Snippet: pm.collectionVariables.set("variable_key", "variable_value");\par
\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 c.\tab Environment variables\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1  -\lang16393  \lang9 Environment variables allow you to tailor your processing to different environments, for example local development vs testing or production. Only one environment can be active at a time\par
-Snippet: pm.environment.set("variable_key", "variable_value");\par
\par

\pard\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 d.\tab Local Variables\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 -\lang16393  \lang9 Local variables are temporary, and only accessible in your request scripts. Local variable values are scoped to a single request or collection run, and are no longer available when the run is complete\par
Snippet: pm.variables.get("variable_key");\par

\pard\nowidctlpar\sa200\sl276\slmult1\par
\par
\par
\par

\pard 
{\pntext\f1 36.\tab}{\*\pn\pnlvlbody\pnf1\pnindent0\pnstart36\pndec{\pntxta.}}
\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 What is WSDL file\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 WSDL basically an XML document contains all the details about web service and all api request\par
\par

\pard\nowidctlpar\fi-360\li644\sa200\sl276\slmult1 37.\tab What is Webservice?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1\cf1\highlight2\f2\lang16393 Whenever we are hitting any service over the internet it known as webservice.\par
Webservice is any piece of software that makes itself available over the internet and uses a standardized XML messaging system.\par
\par

\pard\nowidctlpar\sa200\sl276\slmult1 38. What is UDDI?\par
- universal description discovery integration\par
-UDDI is an XML based standard for describing , publishing and finding the webservices.\par
\par
39. What are diff soap elements/components\par
a. Envelop \endash  It is beginning and end of message\par
b. Header \endash  Header elements contain header information\par
c. Body \endash  body element contains call and response information\par
d. Fault \endash  Fault contain error and status information\par
\par
40.  What are diff WSDL element/component\par
a. Type- Define the data types used by the webservices\par
b. Message \endash  Define the data element for each operation\par
c. Port Type- Describe the operation that can be performed and message involve\par
d. Binding- Defines the protocol and data format for each port type\par
\par

\pard 
{\pntext\f2 41.\tab}{\*\pn\pnlvlbody\pnf2\pnindent0\pnstart41\pndec{\pntxta.}}
\nowidctlpar\fi-360\li720\sa200\sl276\slmult1 What are different assertions present in SoapUI?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Below are the different assertion present in soapui:\par

\pard 
{\pntext\f2 a.\tab}{\*\pn\pnlvlbody\pnf2\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1\cf12 Contains - checks for the existence of a specified string\par
{\pntext\f2 b.\tab}Not Contains - checks for the non-existence of a specified string\cf1\par

\pard\cbpat2 
{\pntext\f2 c.\tab}{\*\pn\pnlvlbody\pnf2\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\fi-360\li1080\sb100\sa100\cf12\highlight0\fs20 Response SLA - validates that the last received response time was within the defined limit. Applicable to Script TestSteps and TestSteps that send requests and receive responses.\par
{\pntext\f2 d.\tab}Invalid HTTP Status Codes - checks that the target TestStep received an HTTP result with a status code not in the list of defined codes. Applicable to any TestStep that receives HTTP messages\par
{\pntext\f2 e.\tab}Valid HTTP Status Codes - checks that the target TestStep received an HTTP result with a status code in the list of defined codes. Applicable to any TestStep that receives HTTP messages.\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1\cf1\highlight2\fs22 Etc.\par
\par

\pard\nowidctlpar\fi-360\li720\sa200\sl276\slmult1\highlight0 42.\tab\highlight2 What are different Api gatways.\par

\pard 
{\pntext\f2 a.\tab}{\*\pn\pnlvlbody\pnf2\pnindent0\pnstart1\pnlcltr{\pntxta.}}
\nowidctlpar\fi-360\li1080\sa200\sl276\slmult1 SSL certificate\par
{\pntext\f2 b.\tab}Routing\par
{\pntext\f2 c.\tab}Adapter\par
{\pntext\f2 d.\tab}Cache\par
{\pntext\f2 e.\tab}Load balancer\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1\par

\pard\nowidctlpar\fi-360\li720\sa200\sl276\slmult1\highlight0 43.\tab\highlight2 Difference between monolithic and miscroservice?\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1 Monolethic - all api available under one service\par
Microservice- for api have different microservice.\par

\pard\nowidctlpar\sa200\sl276\slmult1\par

\pard\nowidctlpar\li720\sa200\sl276\slmult1\par
\cf0\highlight0\f1\lang9\par

\pard\nowidctlpar\li360\sa200\sl276\slmult1\par
\par

\pard\nowidctlpar\sa200\sl276\slmult1  \par
\par
}
 